"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
<<<<<<< Updated upstream
var _t = require("@babel/types");
var _explodeAssignableExpression = require("./explode-assignable-expression");
=======

var _helperExplodeAssignableExpression = require("@babel/helper-explode-assignable-expression");

var _t = require("@babel/types");

>>>>>>> Stashed changes
const {
  assignmentExpression,
  sequenceExpression
} = _t;
<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes
function _default(opts) {
  const {
    build,
    operator
  } = opts;
  const visitor = {
    AssignmentExpression(path) {
      const {
        node,
        scope
      } = path;
      if (node.operator !== operator + "=") return;
      const nodes = [];
<<<<<<< Updated upstream
      const exploded = (0, _explodeAssignableExpression.default)(node.left, nodes, scope);
      nodes.push(assignmentExpression("=", exploded.ref, build(exploded.uid, node.right)));
      path.replaceWith(sequenceExpression(nodes));
    },
=======
      const exploded = (0, _helperExplodeAssignableExpression.default)(node.left, nodes, this, scope);
      nodes.push(assignmentExpression("=", exploded.ref, build(exploded.uid, node.right)));
      path.replaceWith(sequenceExpression(nodes));
    },

>>>>>>> Stashed changes
    BinaryExpression(path) {
      const {
        node
      } = path;
<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes
      if (node.operator === operator) {
        path.replaceWith(build(node.left, node.right));
      }
    }
<<<<<<< Updated upstream
  };
  return visitor;
}

//# sourceMappingURL=index.js.map
=======

  };
  return visitor;
}
>>>>>>> Stashed changes
