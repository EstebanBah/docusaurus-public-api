"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.requeueComputedKeyAndDecorators = requeueComputedKeyAndDecorators;
<<<<<<< Updated upstream
{
  {
    {
      exports.skipAllButComputedKey = function skipAllButComputedKey(path) {
        path.skip();
        if (path.node.computed) {
          path.context.maybeQueue(path.get("key"));
        }
      };
    }
  }
}
=======
exports.skipAllButComputedKey = skipAllButComputedKey;

function skipAllButComputedKey(path) {
  path.skip();

  if (path.node.computed) {
    path.context.maybeQueue(path.get("key"));
  }
}

>>>>>>> Stashed changes
function requeueComputedKeyAndDecorators(path) {
  const {
    context,
    node
  } = path;
<<<<<<< Updated upstream
  if (node.computed) {
    context.maybeQueue(path.get("key"));
  }
=======

  if (node.computed) {
    context.maybeQueue(path.get("key"));
  }

>>>>>>> Stashed changes
  if (node.decorators) {
    for (const decorator of path.get("decorators")) {
      context.maybeQueue(decorator);
    }
  }
}
<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes
const visitor = {
  FunctionParent(path) {
    if (path.isArrowFunctionExpression()) {
      return;
    } else {
      path.skip();
<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes
      if (path.isMethod()) {
        requeueComputedKeyAndDecorators(path);
      }
    }
  },
<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes
  Property(path) {
    if (path.isObjectProperty()) {
      return;
    }
<<<<<<< Updated upstream
    path.skip();
    requeueComputedKeyAndDecorators(path);
  }
};
var _default = visitor;
exports.default = _default;

//# sourceMappingURL=index.js.map
=======

    path.skip();
    requeueComputedKeyAndDecorators(path);
  }

};
var _default = visitor;
exports.default = _default;
>>>>>>> Stashed changes
