"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ValidationError", {
  enumerable: true,
  get: function () {
    return _ValidationError.default;
  }
});
exports.validate = validate;
<<<<<<< Updated upstream
var _absolutePath = _interopRequireDefault(require("./keywords/absolutePath"));
var _ValidationError = _interopRequireDefault(require("./ValidationError"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * @template T
 * @param fn {(function(): any) | undefined}
 * @returns {function(): T}
 */
const memoize = fn => {
  let cache = false;
  /** @type {T} */
  let result;
  return () => {
    if (cache) {
      return result;
    }
    result = /** @type {function(): any} */fn();
    cache = true;
    // Allow to clean up memory for fn
    // and all dependent resources
    // eslint-disable-next-line no-undefined, no-param-reassign
    fn = undefined;
    return result;
  };
};
const getAjv = memoize(() => {
  // Use CommonJS require for ajv libs so TypeScript consumers aren't locked into esModuleInterop (see #110).
  // eslint-disable-next-line global-require
  const Ajv = require("ajv").default;
  // eslint-disable-next-line global-require
  const ajvKeywords = require("ajv-keywords").default;
  // eslint-disable-next-line global-require
  const addFormats = require("ajv-formats").default;

  /**
   * @type {Ajv}
   */
  const ajv = new Ajv({
    strict: false,
    allErrors: true,
    verbose: true,
    $data: true
  });
  ajvKeywords(ajv, ["instanceof", "patternRequired"]);
  addFormats(ajv, {
    keywords: true
  });
  // Custom keywords
  (0, _absolutePath.default)(ajv);
  return ajv;
});

/** @typedef {import("json-schema").JSONSchema4} JSONSchema4 */
/** @typedef {import("json-schema").JSONSchema6} JSONSchema6 */
/** @typedef {import("json-schema").JSONSchema7} JSONSchema7 */
=======

var _absolutePath = _interopRequireDefault(require("./keywords/absolutePath"));

var _ValidationError = _interopRequireDefault(require("./ValidationError"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Use CommonJS require for ajv libs so TypeScript consumers aren't locked into esModuleInterop (see #110).
const Ajv = require("ajv").default;

const ajvKeywords = require("ajv-keywords").default;

const addFormats = require("ajv-formats").default;
/** @typedef {import("json-schema").JSONSchema4} JSONSchema4 */

/** @typedef {import("json-schema").JSONSchema6} JSONSchema6 */

/** @typedef {import("json-schema").JSONSchema7} JSONSchema7 */

>>>>>>> Stashed changes
/** @typedef {import("ajv").ErrorObject} ErrorObject */

/**
 * @typedef {Object} Extend
 * @property {string=} formatMinimum
 * @property {string=} formatMaximum
 * @property {string=} formatExclusiveMinimum
 * @property {string=} formatExclusiveMaximum
 * @property {string=} link
 */

/** @typedef {(JSONSchema4 | JSONSchema6 | JSONSchema7) & Extend} Schema */

/** @typedef {ErrorObject & { children?: Array<ErrorObject>}} SchemaUtilErrorObject */

/**
 * @callback PostFormatter
 * @param {string} formattedError
 * @param {SchemaUtilErrorObject} error
 * @returns {string}
 */

/**
 * @typedef {Object} ValidationErrorConfiguration
 * @property {string=} name
 * @property {string=} baseDataPath
 * @property {PostFormatter=} postFormatter
 */

/**
<<<<<<< Updated upstream
=======
 * @type {Ajv}
 */


const ajv = new Ajv({
  strict: false,
  allErrors: true,
  verbose: true,
  $data: true
});
ajvKeywords(ajv, ["instanceof", "patternRequired"]);
addFormats(ajv, {
  keywords: true
}); // Custom keywords

(0, _absolutePath.default)(ajv);
/**
>>>>>>> Stashed changes
 * @param {Schema} schema
 * @param {Array<object> | object} options
 * @param {ValidationErrorConfiguration=} configuration
 * @returns {void}
 */
<<<<<<< Updated upstream
function validate(schema, options, configuration) {
  let errors = [];
=======

function validate(schema, options, configuration) {
  let errors = [];

>>>>>>> Stashed changes
  if (Array.isArray(options)) {
    errors = Array.from(options, nestedOptions => validateObject(schema, nestedOptions));
    errors.forEach((list, idx) => {
      const applyPrefix =
      /**
       * @param {SchemaUtilErrorObject} error
       */
      error => {
        // eslint-disable-next-line no-param-reassign
        error.instancePath = `[${idx}]${error.instancePath}`;
<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes
        if (error.children) {
          error.children.forEach(applyPrefix);
        }
      };
<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes
      list.forEach(applyPrefix);
    });
    errors = errors.reduce((arr, items) => {
      arr.push(...items);
      return arr;
    }, []);
  } else {
    errors = validateObject(schema, options);
  }
<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes
  if (errors.length > 0) {
    throw new _ValidationError.default(errors, schema, configuration);
  }
}
<<<<<<< Updated upstream

=======
>>>>>>> Stashed changes
/**
 * @param {Schema} schema
 * @param {Array<object> | object} options
 * @returns {Array<SchemaUtilErrorObject>}
 */
<<<<<<< Updated upstream
function validateObject(schema, options) {
  const compiledSchema = getAjv().compile(schema);
=======


function validateObject(schema, options) {
  const compiledSchema = ajv.compile(schema);
>>>>>>> Stashed changes
  const valid = compiledSchema(options);
  if (valid) return [];
  return compiledSchema.errors ? filterErrors(compiledSchema.errors) : [];
}
<<<<<<< Updated upstream

=======
>>>>>>> Stashed changes
/**
 * @param {Array<ErrorObject>} errors
 * @returns {Array<SchemaUtilErrorObject>}
 */
<<<<<<< Updated upstream
function filterErrors(errors) {
  /** @type {Array<SchemaUtilErrorObject>} */
  let newErrors = [];
  for (const error of /** @type {Array<SchemaUtilErrorObject>} */errors) {
=======


function filterErrors(errors) {
  /** @type {Array<SchemaUtilErrorObject>} */
  let newErrors = [];

  for (const error of
  /** @type {Array<SchemaUtilErrorObject>} */
  errors) {
>>>>>>> Stashed changes
    const {
      instancePath
    } = error;
    /** @type {Array<SchemaUtilErrorObject>} */
<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes
    let children = [];
    newErrors = newErrors.filter(oldError => {
      if (oldError.instancePath.includes(instancePath)) {
        if (oldError.children) {
          children = children.concat(oldError.children.slice(0));
<<<<<<< Updated upstream
        }

        // eslint-disable-next-line no-undefined, no-param-reassign
=======
        } // eslint-disable-next-line no-undefined, no-param-reassign


>>>>>>> Stashed changes
        oldError.children = undefined;
        children.push(oldError);
        return false;
      }
<<<<<<< Updated upstream
      return true;
    });
    if (children.length) {
      error.children = children;
    }
    newErrors.push(error);
  }
=======

      return true;
    });

    if (children.length) {
      error.children = children;
    }

    newErrors.push(error);
  }

>>>>>>> Stashed changes
  return newErrors;
}